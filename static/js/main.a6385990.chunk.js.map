{"version":3,"sources":["components/Editor.js","components/Preview.js","components/panes/TitleBar.js","components/panes/Pane.js","components/MarkdownPreviewerApp.js","index.js"],"names":["Editor","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","name","id","props","markdownSource","onChange","onEditorContentsModified","Component","marked","window","Preview","_this","call","markedRenderer","Renderer","link","href","title","text","concat","forceUpdate","preview","document","querySelector","setOptions","breaks","innerHTML","renderer","TitleBar","expandIconDiv","getElementsByClassName","isMaximized","classList","add","remove","maxIcon","expandedIcon","isExpanded","className","onClick","toggleExpanded","toggleMaximized","Pane","console","log","state","setState","toLowerCase","pane","getElementById","otherPanes","Array","from","filter","forEach","contentComponent","panes_TitleBar","DEFAULT_SOURCE","MarkdownPreviewerApp","e","target","editorComponent","components_Editor","previewerComponent","components_Preview","panes_Pane","ReactDOM","render","components_MarkdownPreviewerApp"],"mappings":"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","file":"static/js/main.a6385990.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Editor extends Component {\n  static propTypes = {\n    markdownSource: PropTypes.string.isRequired,\n    onEditorContentsModified: PropTypes.func.isRequired\n  };\n\n  render() {\n    return (\n      <div>\n        <textarea\n          name='editor'\n          id='editor'\n          value={this.props.markdownSource}\n          onChange={this.props.onEditorContentsModified}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst marked = window.marked;\n\nexport class Preview extends Component {\n  static propTypes = {\n    markdownSource: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.markedRenderer = new window.marked.Renderer();\n    this.markedRenderer.link = (href, title, text) => {\n      return `\n        <a href=${href} target='_blank'>${text}</a>\n      `;\n    };\n  }\n\n  componentDidMount() {\n    // Force an update to ensure the preview is displayed on app load\n    this.forceUpdate();\n  }\n\n  componentDidUpdate() {\n    const preview = document.querySelector('#preview');\n\n    marked.setOptions({\n      breaks: true\n    });\n    preview.innerHTML = marked(this.props.markdownSource, {\n      renderer: this.markedRenderer\n    });\n  }\n\n  render() {\n    return <div id='preview' />;\n  }\n}\n\nexport default Preview;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst DefaultClassName = 'pane-titlebar';\n\nexport class TitleBar extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    isMaximized: PropTypes.bool.isRequired,\n    toggleMaximized: PropTypes.func.isRequired,\n    isExpanded: PropTypes.bool.isRequired,\n    toggleExpanded: PropTypes.func.isRequired\n  };\n\n  componentDidUpdate() {\n    const expandIconDiv = document.getElementsByClassName(\n      'pane-expand-icon'\n    )[0];\n    if (this.props.isMaximized)\n      expandIconDiv.classList.add('pane-titlebar-icon-disabled');\n    else expandIconDiv.classList.remove('pane-titlebar-icon-disabled');\n  }\n\n  render() {\n    const id = `pane-titlebar-${this.props.title}`;\n    const maxIcon = this.props.isMaximized\n      ? 'fa-window-minimize'\n      : 'fa-window-maximize';\n    const expandedIcon = this.props.isExpanded\n      ? 'fa-caret-down'\n      : 'fa-caret-right';\n\n    return (\n      <div className={DefaultClassName} id={id}>\n        <div className='pane-expand-icon' onClick={this.props.toggleExpanded}>\n          <i className={`pane-titlebar-icon fas ${expandedIcon} fa-2x`} />\n        </div>\n        <h2 className='title-bar-title'>{this.props.title}</h2>\n        <div className='pane-titlebar-icon-container'>\n          <div\n            className='pane-titlebar-icon pane-titlebar-icon-minmax'\n            onClick={this.props.toggleMaximized}\n          >\n            <i className={`far ${maxIcon} fa-2x`} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TitleBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TitleBar from './TitleBar';\n\nimport '../../css/pane.css';\n\nexport class Pane extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    contentComponent: PropTypes.object.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isExpanded: true,\n      isMaximized: false\n    };\n  }\n\n  componentDidUpdate() {\n    const id = this.props.name ? `pane-${this.props.name.toLowerCase()}` : '';\n    const pane = document.getElementById(id);\n\n    const otherPanes = Array.from(\n      document.getElementsByClassName('pane')\n    ).filter((pane) => pane.id !== id);\n\n    if (this.state.isMaximized) {\n      // Force expanded state\n      if (!this.state.isExpanded) {\n        this.setState({ isExpanded: true });\n      }\n\n      // Hide all other panes\n      otherPanes.forEach((pane) => pane.classList.add('pane-hidden'));\n\n      // Add .pane-maximized class to this pane\n      pane.classList.add('pane-maximized');\n    } else {\n      // Show all other panes\n      otherPanes.forEach((pane) => pane.classList.remove('pane-hidden'));\n\n      // Remove .pane-maximized class from this pane\n      pane.classList.remove('pane-maximized');\n    }\n  }\n\n  /**\n   *  Toggle pane between normal and maximized state\n   */\n  toggleMaximized = () => {\n    console.log('max');\n    const isMaximized = !this.state.isMaximized;\n    this.setState({ isMaximized });\n  };\n\n  /**\n   *  Toggle pane between expanded and contracted state\n   */\n  toggleExpanded = () => {\n    const isExpanded = !this.state.isExpanded;\n    this.setState({ isExpanded });\n  };\n\n  render() {\n    const id = this.props.name ? `pane-${this.props.name.toLowerCase()}` : '';\n    const className = 'pane';\n\n    const contentComponent = this.state.isExpanded ? (\n      <div className='pane-content-component'>\n        {this.props.contentComponent}\n      </div>\n    ) : (\n      <div />\n    );\n\n    return (\n      <div className={className} id={id}>\n        <TitleBar\n          title={this.props.title}\n          isMaximized={this.state.isMaximized}\n          toggleMaximized={this.toggleMaximized}\n          isExpanded={this.state.isExpanded}\n          toggleExpanded={this.toggleExpanded}\n        />\n        {contentComponent}\n      </div>\n    );\n  }\n}\n\nexport default Pane;\n","import React, { Component } from 'react';\nimport Editor from './Editor';\nimport Preview from './Preview';\nimport Pane from './panes/Pane';\n\nconst DEFAULT_SOURCE = `\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n\n`;\nexport class MarkdownPreviewerApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markdownSource: DEFAULT_SOURCE\n    };\n  }\n\n  onEditorContentsModified = (e) => {\n    const markdownSource = e.target.value;\n    this.setState({ markdownSource });\n  };\n\n  render() {\n    const editorComponent = (\n      <Editor\n        markdownSource={this.state.markdownSource}\n        onEditorContentsModified={this.onEditorContentsModified}\n      />\n    );\n    const previewerComponent = (\n      <Preview markdownSource={this.state.markdownSource} />\n    );\n\n    return (\n      <div id='app-container'>\n        <Pane name='Editor' title='Editor' contentComponent={editorComponent} />\n        <Pane\n          name='Previewer'\n          title='Preview'\n          contentComponent={previewerComponent}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MarkdownPreviewerApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport MarkdownPreviewerApp from './components/MarkdownPreviewerApp';\n\nimport './css/main.css';\n\nReactDOM.render(<MarkdownPreviewerApp />, document.getElementById('root'));\n"],"sourceRoot":""}